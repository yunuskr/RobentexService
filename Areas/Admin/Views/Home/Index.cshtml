@model RobentexService.Models.ViewModels.HomeIndexViewModel
@using RobentexService.Models

@functions{
    // Kart ba≈ülƒ±ƒüƒ±: bo≈üsa "Firma + Servis Talebi"
    private static string CardTitle(ServiceRequest s) =>
        string.IsNullOrWhiteSpace(s.Title)
            ? $"{(s.CompanyName ?? "").Trim()} Servis Talebi".Trim()
            : s.Title!;

    // Durum -> metin
    private static string StatusLabel(ServiceStatus s) => s switch{
        ServiceStatus.YeniTalep        => "Yeni Talep",
        ServiceStatus.TeklifIletildi   => "Teklif ƒ∞letildi",
        ServiceStatus.ServisAsamasi    => "Servis A≈üamasƒ±",
        ServiceStatus.TeklifReddedildi => "Teklif Reddedildi",
        ServiceStatus.Tamamlandi       => "Tamamlandƒ±",
        ServiceStatus.FaturaEdildi     => "Fatura Edildi",
        _ => s.ToString()
    };

    // Durum -> renk sƒ±nƒ±fƒ±
    private static string StatusPillClass(ServiceStatus s) => s switch{
        ServiceStatus.YeniTalep        => "pill pill-green",
        ServiceStatus.TeklifIletildi   => "pill pill-amber",
        ServiceStatus.ServisAsamasi    => "pill pill-cyan",
        ServiceStatus.TeklifReddedildi => "pill pill-red",
        ServiceStatus.Tamamlandi       => "pill pill-gray",
        ServiceStatus.FaturaEdildi     => "pill pill-purple",
        _ => "pill"
    };

    // (opsiyonel) Son not kƒ±sa √∂zet
    private static string LastNote(ServiceRequest s, int max = 80){
        var t = s.Notes?.OrderByDescending(n=>n.CreatedAt).FirstOrDefault()?.Text ?? "";
        if (string.IsNullOrWhiteSpace(t)) return "";
        t = t.Trim();
        return t.Length > max ? t.Substring(0, max-1) + "‚Ä¶" : t;
    }
}

@{
    ViewData["Title"] = "Robentex Servis Takip Paneli";
    Layout = "/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";

    var editDataUrl = Url.Action("EditData", "Home", new { area = "Admin" });            // GET JSON
    var saveUrl     = Url.Action("Save",     "ServiceRequests", new { area = "Admin" }); // POST kaydet
    var now         = DateTime.Now.ToString("HH:mm | dd.MM.yyyy");

    // T√ºm kayƒ±tlarƒ± tek listede topla (g√∂rsellerdeki gibi tablo g√∂r√ºn√ºm√º)
    var all = Enumerable.Empty<ServiceRequest>();
    if(Model != null){
        all =
            (Model.YeniTalep          ?? Enumerable.Empty<ServiceRequest>())
            .Concat(Model.TeklifIletildi ?? Enumerable.Empty<ServiceRequest>())
            .Concat(Model.ServisAsamasi  ?? Enumerable.Empty<ServiceRequest>())
            .Concat(Model.TeklifReddedildi ?? Enumerable.Empty<ServiceRequest>())
            .Concat(Model.Tamamlandi    ?? Enumerable.Empty<ServiceRequest>())
            .Concat(Model.FaturaEdildi  ?? Enumerable.Empty<ServiceRequest>())
            .OrderByDescending(x => x.CreatedAt);
    }
}

<div class="kb-wrap">
  <!-- √úst bar -->
  <header class="kb-header">
    <div class="live">
      <span class="dot"></span>
      <span class="txt">Canlƒ±</span>
      <span class="sub">son g√ºncelleme: <strong>@now</strong></span>
    </div>

    <h1>Robentex Servis Takip Paneli</h1>

    <div class="search">
      <span class="mag">üîç</span>
      <input id="searchBox" type="text" placeholder="Ara: #numara, ba≈ülƒ±k, m√º≈üteri..." />
    </div>
  </header>

  <!-- Liste Paneli -->
  <section class="list-panel">
    <div class="list-head">
      <div>Ba≈ülƒ±k</div>
      <div>Sipari≈ü No</div>
      <div class="sort" role="button" tabindex="0" aria-label="Duruma g√∂re sƒ±rala">Durum <span class="caret">‚ñæ</span></div>
      <div>Not</div>
      <div class="right">
        <button class="create-btn open-create" type="button" aria-label="Yeni talep">
          <svg class="ico" viewBox="0 0 24 24" aria-hidden="true">
            <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
          <span class="lbl">Yeni Talep</span>
        </button>
      </div>
    </div>

    <!-- Filtre Barƒ± -->
    <div class="list-filters">
      <div class="f-group">
        <label for="statusFilter">Durum</label>
        <select id="statusFilter">
          <option value="">T√ºm√º</option>
          <option value="0">Yeni Talep</option>
          <option value="1">Teklif ƒ∞letildi</option>
          <option value="2">Servis A≈üamasƒ±</option>
          <option value="3">Teklif Reddedildi</option>
          <option value="4">Tamamlandƒ±</option>
          <option value="5">Fatura Edildi</option>
        </select>
      </div>

      <div class="f-group">
        <label for="dateFrom">Tarih (Ba≈ülangƒ±√ß)</label>
        <input id="dateFrom" type="date" />
      </div>

      <div class="f-group">
        <label for="dateTo">Tarih (Biti≈ü)</label>
        <input id="dateTo" type="date" />
      </div>

      <div class="f-actions">
        <button id="resetFilters" type="button" class="btn btn-dark" title="Filtreleri temizle">Sƒ±fƒ±rla</button>
      </div>
    </div>

    <div class="list-body">
      @if (all.Any())
      {
        foreach (var item in all)
        {
          <div class="list-row"
               data-id="@item.Id"
               data-status="@((int)item.Status)"
               data-created="@item.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd")"
               data-title="@CardTitle(item)"
               data-note="@(LastNote(item))">
            <!-- Ba≈ülƒ±k -->
            <div class="cell title">
              <div class="meta">Olu≈üturma Tarihi: @item.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy / HH:mm")</div>
              <div class="ttl">@CardTitle(item)</div>
            </div>

            <!-- Sipari≈ü No -->
            <div class="cell ord">#@item.Id</div>

            <!-- Durum -->
            <div class="cell status">
              <span class="@StatusPillClass(item.Status)">
                <span class="dot-mini"></span>@StatusLabel(item.Status)
              </span>
            </div>

            <!-- Not -->
            <div class="cell note">@(LastNote(item) is string n && n.Length>0 ? n : "‚Äî")</div>

            <!-- Aksiyonlar -->
            <div class="cell actions">
              <button class="btn btn-dark open-edit" type="button" data-id="@item.Id" aria-label="Talep #@item.Id d√ºzenle">D√ºzenle</button>
              <button class="btn btn-ok open-details" type="button" data-id="@item.Id">Detay G√∂r</button>
            </div>
          </div>
        }
      }
      else
      {
        <div class="list-empty">Kayƒ±t bulunamadƒ±.</div>
      }
    </div>
  </section>

  <!-- Alt logo -->
  <footer class="kb-footer">
    <img src="~/Images/Robentex.png" alt="Robentex" asp-append-version="true" />
  </footer>
</div>

@* === Modal TEMPLATE partial === *@
@await Html.PartialAsync(
  "~/Views/Shared/Modals/_EditServiceRequestModal.cshtml",
  new RobentexService.Models.ViewModels.Modals.EditServiceRequestModalVm{
      SaveUrl = saveUrl!
  }
  
)
@await Html.PartialAsync("~/Views/Shared/Modals/_ServiceRequestDetailsModal.cshtml")
@await Html.PartialAsync(
  "~/Views/Shared/Modals/_CreateServiceRequestModal.cshtml",
  new RobentexService.Models.ViewModels.Modals.CreateServiceRequestModalVm{
      CreateUrl = Url.Action("Create", "ServiceRequests", new { area = "Admin" })!
  }
)
@section Styles{
  <!-- Modal ortak stiller -->
  <link rel="stylesheet" href="~/css/rtx-modal.css" asp-append-version="true" />
  <style>
  :root{
    --bg:#1f1f1f; --panel:#2a2a2a; --panel-2:#3a3a3a; --text:#eaeaea; --muted:#a9b0b7;
    --green:#47c266; --amber:#f2c039; --cyan:#3ac2e3; --gray:#767a81; --purple:#a576d8; --red:#d94a4a;
    --ok:#3cd25b; --dark:#111; --radius:14px;
  }

  /* Genel */
  html, body{ height:100%; }
  body{ background:#1b1b1b; color:var(--text); }

  /* ‚Üí Sayfayƒ± daha geni≈ü kullan + yan/alt bo≈üluklarƒ± azalt */
  .kb-wrap{
    width:100%;
    max-width: 1500px;
    margin:0 auto;
    padding:8px 10px 10px;
  }

  /* √úst bar */
  .kb-header{
    display:grid; grid-template-columns:1fr auto 1fr; grid-template-rows:auto auto;
    align-items:center; gap:8px 12px; margin-bottom:12px;
  }
  .kb-header h1{ grid-column:2; grid-row:1; margin:0; font-weight:700; letter-spacing:.2px; }
  .kb-header .live{ grid-column:1; grid-row:1; display:flex; align-items:center; gap:8px; }
  .kb-header .dot{ width:10px; height:10px; border-radius:50%; background:#ff3b30; box-shadow:0 0 0 3px rgba(255,59,48,.15); }
  .kb-header .txt{ font-weight:600; color:#ff6961; }
  .kb-header .sub{ color:var(--muted); font-size:.9rem; }

  /* Arama */
  .kb-header .search{
    grid-column:1/4; grid-row:2; position:relative;
    width:min(1200px, 100%);
    justify-self:center;
  }
  .kb-header .search input{
    width:100%; height:48px; background:#555; border:1px solid #666; color:var(--text);
    padding:.8rem 1.1rem .8rem 2.4rem; border-radius:26px; outline:0;
  }
  .kb-header .search .mag{ position:absolute; left:12px; top:50%; transform:translateY(-50%); opacity:.85; }

  /* ===== Liste Panel ===== */
  .list-panel{
    background:#2f2f2f; border:1px solid #3f3f3f; border-radius:14px;
    box-shadow:0 4px 14px rgba(0,0,0,.22) inset;
    overflow:hidden;
    width:100%;
    max-width: 1500px;
    margin: 0 auto 10px;
  }
  .create-btn{
  display:inline-flex; align-items:center; gap:10px;
  background: var(--amber); color:#111;
  border:0; border-radius:999px;
  padding:.55rem 1rem; font-weight:800;
  box-shadow: 0 6px 18px rgba(242,192,57,.25);
  transition: transform .08s ease, filter .15s ease, box-shadow .15s ease;
  }
  .create-btn .ico{ width:18px; height:18px; display:block; }
  .create-btn:hover{ filter:brightness(1.06); box-shadow:0 8px 22px rgba(242,192,57,.32); }
  .create-btn:active{ transform: translateY(1px); }

  /* Dar ekranda sadece ikon g√∂ster */
  @@media (max-width: 900px){
    .create-btn{ padding:.48rem .6rem; border-radius:12px; }
    .create-btn .lbl{ display:none; }
    .create-btn .ico{ width:20px; height:20px; }
  }

/* H√ºcre hizasƒ± i√ßin (opsiyonel) */
.list-head .right{ display:flex; justify-content:flex-end; }
  /* header */
  .list-head{
    display:grid;
    grid-template-columns: 2fr 150px 220px 1.2fr 200px;
    gap:10px; align-items:center;
    background:#5a5a5a; color:#fff; padding:8px 12px;
  }
  .list-head .sort{ display:flex; align-items:center; gap:6px; cursor:pointer; }
  .list-head .caret{ opacity:.8; }

  /* filtre barƒ± */
  .list-filters{
    display:flex; gap:12px; align-items:end; padding:10px 12px; background:#383838; border-top:1px solid #444; border-bottom:1px solid #444;
  }
  .list-filters .f-group{ display:flex; flex-direction:column; gap:6px; }
  .list-filters label{ color:#d0d6dc; font-size:.9rem; }
  .list-filters select, .list-filters input[type="date"]{
    background:#2c2c2c; border:1px solid #3a3a3a; color:#eaeaea; border-radius:10px; padding:.45rem .6rem; min-height:36px;
  }
  .list-filters .f-actions{ margin-left:auto; }

  /* g√∂vde */
  .list-body{
    max-height: calc(100vh - 300px);
    overflow:auto;
    padding:8px;
  }

  .list-row{
    display:grid;
    grid-template-columns: 2fr 150px 220px 1.2fr 200px;
    gap:10px; align-items:center;
    background:#1f1f1f; border:1px solid #3a3a3a; border-radius:10px;
    padding:10px 12px; margin-bottom:8px;
  }
  .list-body .list-row:last-child{ margin-bottom:4px; }

  .list-row .meta{ color:#b6bcc3; font-size:.82rem; margin-bottom:3px; }
  .list-row .ttl{ font-weight:700; }
  .cell.ord{ color:#cfcfcf; }
  .cell.note{ color:#d9d9d9; opacity:.9; }
  .cell.actions{ display:flex; gap:8px; justify-content:flex-end; }

  /* pill */
  .pill{ display:inline-flex; align-items:center; gap:8px; font-weight:700; color:#111;
    padding:.35rem .7rem; border-radius:999px; }
  .pill-green{ background:var(--green); }
  .pill-amber{ background:var(--amber); }
  .pill-cyan{ background:var(--cyan); }
  .pill-red{ background:var(--red); color:#fff; }
  .pill-gray{ background:var(--gray); color:#fff; }
  .pill-purple{ background:var(--purple); }
  .dot-mini{ width:8px; height:8px; border-radius:50%; background:#0e0e0e; opacity:.35; }

  .list-empty{ padding:14px; color:#a9b0b7; }

  /* Buttons */
  .btn{ border:none; border-radius:999px; padding:.45rem .9rem; font-weight:800; cursor:pointer; }
  .btn-dark{ background:#111; color:#fff; }
  .btn-ok{ background:var(--ok); color:#0e0e0e; }
  .icon-btn{ width:28px; height:28px; border-radius:8px; border:1px solid #3b3b3b; background:#2d2d2d; color:#ddd; cursor:pointer; }

  /* Alt logo */
  .kb-footer{ display:flex; justify-content:center; align-items:center; padding:8px 0 2px; opacity:.9; }
  .kb-footer img{ height:24px; }

  /* Scrollbar */
  .list-body::-webkit-scrollbar{ width:10px; }
  .list-body::-webkit-scrollbar-thumb{ background:#555; border-radius:10px; border:2px solid #2f2f2f; }

  /* responsive  */
  @@media (max-width:1200px){
    .list-head, .list-row{ grid-template-columns: 1.5fr 120px 190px 1fr 180px; }
  }
  @@media (max-width:900px){
    .list-head, .list-row{ grid-template-columns: 1.3fr 110px 170px 1fr 160px; }
  }
  </style>
}

@section Scripts{
  <!-- Modal kodu i√ßin endpoint deƒüi≈ükeni -->
  <script>
    window.__RTX_EDIT_DATA_URL__ = '@editDataUrl';
  </script>
  <script src="~/js/create-modal.js" asp-append-version="true"></script>
  <!-- Modal a√ß/kaydet JS (not listesi g√∂stermiyor, sadece NewNote alanƒ±) -->
  <script src="~/js/edit-modal.js" asp-append-version="true"></script>

  <!-- Filtreleme + Sƒ±ralama -->
  <script>
    // === Filtreleme ===
    const els = {
      search: document.getElementById('searchBox'),
      status: document.getElementById('statusFilter'),
      from:   document.getElementById('dateFrom'),
      to:     document.getElementById('dateTo'),
      reset:  document.getElementById('resetFilters'),
      list:   document.querySelector('.list-body')
    };

    const getRows = () => Array.from(els.list.querySelectorAll('.list-row'));

    function passText(r, q){
      if(!q) return true;
      q = q.toLowerCase().trim();
      const title = (r.dataset.title || '').toLowerCase();
      const note  = (r.dataset.note  || '').toLowerCase();
      const ord   = (r.querySelector('.cell.ord')?.textContent || '').toLowerCase();
      return title.includes(q) || note.includes(q) || ord.includes(q);
    }
    function passStatus(r, st){
      if(st === '' || st == null) return true;
      return r.dataset.status === String(st);
    }
    function passDate(r, dFrom, dTo){
      const d = r.dataset.created; // "yyyy-MM-dd"
      if(!d) return true;
      if(dFrom && d < dFrom) return false;
      if(dTo   && d > dTo)   return false;
      return true;
    }

    function applyFilters(){
      const q   = els.search?.value || '';
      const st  = els.status?.value ?? '';
      const df  = els.from?.value || '';
      const dt  = els.to?.value   || '';

      getRows().forEach(r=>{
        const show = passText(r,q) && passStatus(r,st) && passDate(r,df,dt);
        r.style.display = show ? '' : 'none';
      });
    }

    // eventler
    els.search?.addEventListener('input', applyFilters);
    els.status?.addEventListener('change', applyFilters);
    els.from?.addEventListener('change', applyFilters);
    els.to?.addEventListener('change', applyFilters);
    els.reset?.addEventListener('click', ()=>{
      if(els.search) els.search.value='';
      if(els.status) els.status.value='';
      if(els.from)   els.from.value='';
      if(els.to)     els.to.value='';
      applyFilters();
    });

    // === Sƒ±ralama (filtrelerle uyumlu) ===
    let sortState = { key:'createdAt', dir:'desc' };
    const parseRowDate = (r) => {
      const s = r.dataset.created;
      return s ? new Date(s + 'T00:00:00').getTime() : 0;
    };

    function sortRows(){
      const arr = getRows();
      const meta = arr.map(r=>{
        const statusText = r.querySelector('.cell.status')?.innerText.trim() || '';
        return { r, createdAt: parseRowDate(r), status: statusText };
      });

      meta.sort((a,b)=>{
        const dir = sortState.dir === 'asc' ? 1 : -1;
        const ka = a[sortState.key];
        const kb = b[sortState.key];
        return (ka>kb ? 1 : ka<kb ? -1 : 0) * dir;
      });

      meta.forEach(x=>els.list.appendChild(x.r));
    }

    document.querySelector('.list-head .sort')?.addEventListener('click', ()=>{
      if (sortState.key === 'createdAt') sortState = { key:'status', dir:'asc' };
      else if (sortState.key === 'status') sortState = { key:'status', dir: (sortState.dir==='asc'?'desc':'asc') };
      else sortState = { key:'createdAt', dir:'desc' };
      sortRows();
    });

    // ƒ∞lk y√ºklemede
    applyFilters();
  </script>
  <script>
    window.__RTX_EDIT_DATA_URL__    = '@editDataUrl';
    window.__RTX_DETAILS_DATA_URL__ = '@Url.Action("DetailsData","Home", new { area="Admin" })';
  </script>
  <script src="~/js/edit-modal.js" asp-append-version="true"></script>
  <script src="~/js/details-modal.js" asp-append-version="true"></script>
}
